package ro.skypixel.play.dakotaAC.Exploit;

import org.bukkit.block.Block;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.Action;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.FluidCollisionMode; // Import necessary for FluidCollisionMode
import ro.skypixel.play.dakotaAC.Alert; // Assuming this class exists and works

// No longer need these imports as the methods using them are removed or logic is inlined
// import org.bukkit.util.Vector;
// import java.util.HashSet;
// import java.util.Set;

public class GhostHand implements Listener {

    // Maximum interaction distance for getTargetBlockExact.
    // Vanilla reach is around 4.5-5 blocks.
    private static final int MAX_INTERACTION_DISTANCE = 5;

    /**
     * Handles player interaction events to detect "GhostHand" exploits.
     * This occurs when a player interacts with a block that is not legitimately
     * in their line of sight according to the server.
     *
     * @param event The PlayerInteractEvent.
     */
    @EventHandler(priority = EventPriority.HIGH, ignoreCancelled = true)
    public void onPlayerInteract(PlayerInteractEvent event) {
        // We are only interested in right-click block interactions.
        if (event.getAction() != Action.RIGHT_CLICK_BLOCK || event.getClickedBlock() == null) {
            return;
        }

        Player player = event.getPlayer();
        Block clickedBlock = event.getClickedBlock(); // The block the event reports as being clicked.

        // Get the block the server believes the player is looking at.
        // FluidCollisionMode.NEVER means the raytrace will not stop at non-solid blocks like water or lava.
        // Use a standard interaction distance.
        Block targetSeenByServer = player.getTargetBlockExact(MAX_INTERACTION_DISTANCE, FluidCollisionMode.NEVER);

        // Core GhostHand Check:
        // If the server doesn't see the player targeting any block (targetSeenByServer is null),
        // or if the block seen by the server is different from the block the player interacted with,
        // it's a potential GhostHand situation.
        if (targetSeenByServer == null || !targetSeenByServer.equals(clickedBlock)) {
            // Log the alert and cancel the event to prevent the interaction.
            Alert.getInstance().alert("GhostHand", player);
            event.setCancelled(true);
            // You might want to add more detailed logging here for debugging, e.g.:
            // System.out.println("[GhostHand] Player " + player.getName() + " flagged. Clicked: " + clickedBlock.getType() + " at " + clickedBlock.getLocation() + ". Server saw: " + (targetSeenByServer == null ? "null" : targetSeenByServer.getType() + " at " + targetSeenByServer.getLocation()));
        }
        // No additional angle check is performed, as player.getTargetBlockExact()
        // is the primary determinant of what block the player is validly aiming at.
        // This should reduce false positives from quick mouse movements.
    }

    // The methods `hasBukkitLineOfSight` and `isLookingTowards` are no longer needed
    // with this simplified and more direct approach.
    // The `transparentMaterials` set was also removed as it was unused.
}
