package ro.skypixel.play.dakotaAC.Exploit;

import org.bukkit.GameMode;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.block.Block;
import org.bukkit.block.data.BlockData;
import org.bukkit.block.data.Openable;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerMoveEvent;
import ro.skypixel.play.dakotaAC.Alert;

import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

public class Phase implements Listener {

    // Comprehensive set of materials that are always considered passable or non-solid.
    private static final Set<Material> PASSABLE_MATERIALS = new HashSet<>();

    static {
        PASSABLE_MATERIALS.addAll(Arrays.asList(
                Material.AIR, Material.CAVE_AIR, Material.VOID_AIR,
                Material.WATER, Material.LAVA,
                // Plants & Foliage
                Material.SHORT_GRASS, Material.TALL_GRASS, Material.FERN, Material.LARGE_FERN,
                Material.DEAD_BUSH, Material.DANDELION, Material.POPPY, Material.BLUE_ORCHID,
                Material.ALLIUM, Material.AZURE_BLUET, Material.RED_TULIP, Material.ORANGE_TULIP,
                Material.WHITE_TULIP, Material.PINK_TULIP, Material.OXEYE_DAISY, Material.CORNFLOWER,
                Material.LILY_OF_THE_VALLEY, Material.WITHER_ROSE, Material.SUNFLOWER, Material.LILAC,
                Material.ROSE_BUSH, Material.PEONY, Material.BROWN_MUSHROOM, Material.RED_MUSHROOM,
                Material.CRIMSON_FUNGUS, Material.WARPED_FUNGUS, Material.CRIMSON_ROOTS, Material.WARPED_ROOTS,
                Material.NETHER_SPROUTS, Material.WEEPING_VINES, Material.WEEPING_VINES_PLANT,
                Material.TWISTING_VINES, Material.TWISTING_VINES_PLANT, Material.VINE, Material.SUGAR_CANE,
                Material.KELP, Material.KELP_PLANT, Material.SEAGRASS, Material.TALL_SEAGRASS,
                Material.WHEAT, Material.CARROTS, Material.POTATOES, Material.BEETROOTS,
                Material.NETHER_WART, Material.PUMPKIN_STEM, Material.ATTACHED_PUMPKIN_STEM,
                Material.MELON_STEM, Material.ATTACHED_MELON_STEM,
                // Utility & Thin Blocks
                Material.SNOW, // Snow layers, not SNOW_BLOCK
                Material.COBWEB, Material.LADDER,
                Material.TORCH, Material.WALL_TORCH, Material.REDSTONE_TORCH, Material.REDSTONE_WALL_TORCH,
                Material.SOUL_TORCH, Material.SOUL_WALL_TORCH,
                Material.LEVER,
                Material.TRIPWIRE_HOOK, Material.TRIPWIRE,
                Material.END_ROD, Material.LIGHTNING_ROD,
                // Signs
                Material.OAK_SIGN, Material.SPRUCE_SIGN, Material.BIRCH_SIGN, Material.JUNGLE_SIGN,
                Material.ACACIA_SIGN, Material.DARK_OAK_SIGN, Material.CRIMSON_SIGN, Material.WARPED_SIGN,
                Material.OAK_WALL_SIGN, Material.SPRUCE_WALL_SIGN, Material.BIRCH_WALL_SIGN,
                Material.JUNGLE_WALL_SIGN, Material.ACACIA_WALL_SIGN, Material.DARK_OAK_WALL_SIGN,
                Material.CRIMSON_WALL_SIGN, Material.WARPED_WALL_SIGN,
                // Buttons
                Material.STONE_BUTTON, Material.OAK_BUTTON, Material.SPRUCE_BUTTON, Material.BIRCH_BUTTON,
                Material.JUNGLE_BUTTON, Material.ACACIA_BUTTON, Material.DARK_OAK_BUTTON,
                Material.CRIMSON_BUTTON, Material.WARPED_BUTTON, Material.POLISHED_BLACKSTONE_BUTTON,
                // Rails
                Material.RAIL, Material.POWERED_RAIL, Material.DETECTOR_RAIL, Material.ACTIVATOR_RAIL,
                // Carpets
                Material.WHITE_CARPET, Material.ORANGE_CARPET, Material.MAGENTA_CARPET, Material.LIGHT_BLUE_CARPET,
                Material.YELLOW_CARPET, Material.LIME_CARPET, Material.PINK_CARPET, Material.GRAY_CARPET,
                Material.LIGHT_GRAY_CARPET, Material.CYAN_CARPET, Material.PURPLE_CARPET, Material.BLUE_CARPET,
                Material.BROWN_CARPET, Material.GREEN_CARPET, Material.RED_CARPET, Material.BLACK_CARPET,
                // Pressure Plates
                Material.STONE_PRESSURE_PLATE, Material.OAK_PRESSURE_PLATE, Material.SPRUCE_PRESSURE_PLATE,
                Material.BIRCH_PRESSURE_PLATE, Material.JUNGLE_PRESSURE_PLATE, Material.ACACIA_PRESSURE_PLATE,
                Material.DARK_OAK_PRESSURE_PLATE, Material.CRIMSON_PRESSURE_PLATE, Material.WARPED_PRESSURE_PLATE,
                Material.POLISHED_BLACKSTONE_PRESSURE_PLATE, Material.LIGHT_WEIGHTED_PRESSURE_PLATE,
                Material.HEAVY_WEIGHTED_PRESSURE_PLATE,
                // Others
                Material.SCAFFOLDING,
                Material.FLOWER_POT,
                Material.FIRE, Material.SOUL_FIRE,
                Material.COMPARATOR, Material.REPEATER,
                Material.STRUCTURE_VOID
        ));
    }

    /**
     * Determines if a block is effectively solid for phase checking.
     * Considers Openable states (doors, gates) and a predefined list of passable materials.
     *
     * @param block The block to check.
     * @return True if the block should be considered solid for phasing, false otherwise.
     */
    private static boolean isEffectivelySolid(Block block) {
        if (block == null) {
            return false;
        }
        Material type = block.getType();
        BlockData blockData = block.getBlockData();

        // 1. Check for Openable states (Doors, Fence Gates, Trapdoors)
        if (blockData instanceof Openable) {
            if (((Openable) blockData).isOpen()) {
                return false; // Open doors/gates/trapdoors are passable
            }
            // If closed, Material.isSolid() below will handle it (e.g., closed door is solid)
        }

        // 2. Check against the predefined list of always passable materials.
        if (PASSABLE_MATERIALS.contains(type)) {
            return false;
        }

        // 3. Default to Material.isSolid().
        // This handles most standard blocks (stone, dirt) and also:
        // - Closed doors, closed fence gates, closed trapdoors.
        // - Fences, Walls, Glass Panes, Iron Bars (which are all type.isSolid() == true).
        return type.isSolid();
    }


    @EventHandler(priority = EventPriority.HIGH, ignoreCancelled = true)
    public void onPlayerMove(PlayerMoveEvent event) {
        Player player = event.getPlayer();
        Location to = event.getTo();
        Location from = event.getFrom();

        // Ignore if 'to' is null or if player hasn't moved to a new block coordinate
        if (to == null ||
                (from.getBlockX() == to.getBlockX() &&
                        from.getBlockY() == to.getBlockY() &&
                        from.getBlockZ() == to.getBlockZ())) {
            return;
        }

        // Ignore players in exempt game modes or states
        if (player.getGameMode() == GameMode.SPECTATOR || player.getGameMode() == GameMode.CREATIVE) {
            return;
        }
        if (player.isFlying() || player.isGliding() || player.isInsideVehicle()) {
            return;
        }

        // Define key points for checking: one near feet, one near head.
        // Player height is typically ~1.8 blocks.
        double playerHeight = player.getHeight();
        Location feetCheckLoc = to.clone().add(0, 0.1, 0); // Check block player's feet are in
        Location headCheckLoc = to.clone().add(0, playerHeight - 0.1, 0); // Check block player's head is in

        Block blockAtFeet = feetCheckLoc.getBlock();
        Block blockAtHead = headCheckLoc.getBlock();

        boolean feetAreInSolid = isEffectivelySolid(blockAtFeet);
        boolean headIsInSolid = isEffectivelySolid(blockAtHead);

        // NEW LOGIC: Flag only if both feet AND head are trying to move into solid blocks.
        if (feetAreInSolid && headIsInSolid) {
            // Provide more context in the alert
            Alert.getInstance().alert("Phase", player);
            event.setCancelled(true);
        }
    }
}
